<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- Material Design Color Palette -->
    <SolidColorBrush x:Key="PrimaryColor" Color="#0078D7"/>
    <SolidColorBrush x:Key="PrimaryLightColor" Color="#1E90FF"/>
    <SolidColorBrush x:Key="PrimaryDarkColor" Color="#0063B1"/>
    <SolidColorBrush x:Key="AccentColor" Color="#E5A100"/>
    <SolidColorBrush x:Key="TextOnPrimaryColor" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="ButtonBackgroundColor" Color="#E0E0E0"/>
    <SolidColorBrush x:Key="ButtonTextColor" Color="#0078D7"/>

    <!-- Menu Item Style -->
    <Style x:Key="MaterialMenuItemStyle" TargetType="MenuItem">
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="Foreground" Value="{StaticResource TextOnPrimaryColor}"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <!-- Dropdown Menu Item Style -->
    <Style x:Key="DropdownMenuItemStyle"
           TargetType="MenuItem">
        <!-- Цвета и отступы -->
        <Setter Property="Background"      Value="White"/>
        <Setter Property="Foreground"      Value="{StaticResource ButtonTextColor}"/>
        <Setter Property="Padding"         Value="10,5"/>

        <!-- Убираем серый бордюр -->
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush"     Value="Transparent"/>
        
        <!-- Полностью переопределяем шаблон для удаления серых областей -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border x:Name="Border" 
                            Background="{TemplateBinding Background}"
                            BorderThickness="0" 
                            Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Arrow"/>
                            </Grid.ColumnDefinitions>
                            
                            <!-- Icon -->
                            <ContentPresenter x:Name="Icon" 
                                              Content="{TemplateBinding Icon}"
                                              Margin="4,0,6,0" 
                                              VerticalAlignment="Center"/>
                            
                            <!-- Header -->
                            <ContentPresenter Grid.Column="1"
                                              ContentSource="Header"
                                              Margin="0,0,0,0"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True"/>
                            
                            <!-- Submenu Arrow -->
                            <Path x:Name="Arrow"
                                  Grid.Column="3"
                                  Data="M0,0 L4,4 L0,8 Z"
                                  Fill="{TemplateBinding Foreground}"
                                  Margin="10,0,0,0"
                                  VerticalAlignment="Center"
                                  Visibility="Collapsed"/>
                            
                            <!-- Popup for submenu -->
                            <Popup x:Name="SubMenuPopup" 
                                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   AllowsTransparency="True" 
                                   Placement="Right"
                                   Focusable="false" 
                                   PopupAnimation="Fade">
                                <Border x:Name="SubMenuBorder" 
                                        Background="White"
                                        BorderThickness="0">
                                    <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <ItemsPresenter x:Name="ItemsPresenter" 
                                                        KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                        Grid.IsSharedSizeScope="True"/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    
                    <!-- Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- When highlighted (hovered) -->
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource PrimaryLightColor}"/>
                            <!-- Keep text blue on hover -->
                        </Trigger>
                        
                        <!-- For disabled state -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                       
                        <!-- Show arrow for items with subitems -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Role" Value="SubMenuHeader">
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        
                        <!-- Submenu placement -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Separator в меню -->
    <Style x:Key="MaterialMenuSeparatorStyle"
           TargetType="Separator">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Height" Value="1"/>
        <Setter Property="Background" Value="#FFD0D0D0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            HorizontalAlignment="Stretch"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button Style -->
    <Style x:Key="MaterialButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonTextColor}"/>
        <Setter Property="Padding" Value="15,5"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.9"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Small Tool Button Style -->
    <Style x:Key="MaterialSmallToolButtonStyle" TargetType="Button">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Margin" Value="0,0,4,0"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonTextColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.9"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Close Button Style for Tab Header -->
    <Style x:Key="ClosableTabButtonStyle" TargetType="Button">
        <Setter Property="Width"        Value="16"/>
        <Setter Property="Height"       Value="16"/>
        <Setter Property="FontWeight"   Value="Bold"/>
        <Setter Property="FontSize"     Value="12"/>
        <Setter Property="Background"   Value="Transparent"/>
        <Setter Property="Foreground"   Value="#808080"/>
        <Setter Property="Cursor"       Value="Hand"/>
        <Setter Property="Focusable"    Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Red"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Compact Closable Tab Header -->
    <DataTemplate x:Key="ClosableTabHeaderTemplate_Compact">
        <Grid VerticalAlignment="Center" MinHeight="26" MinWidth="80">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <TextBlock Grid.Column="0"
                       Text="{Binding TabHeader}"
                       Margin="6,0,4,0"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Left"
                       TextWrapping="NoWrap"
                       TextTrimming="CharacterEllipsis"
                       Foreground="{StaticResource TextOnPrimaryColor}" />
            
            <Button Grid.Column="1"
                    Style="{StaticResource ClosableTabButtonStyle}"
                    Content="✕"
                    ToolTip="Close tab"
                    Margin="4,5,2,5"
                    Command="{Binding DataContext.CloseTabCommand,
                              RelativeSource={RelativeSource AncestorType=TabControl}}"
                    CommandParameter="{Binding}" />
        </Grid>
    </DataTemplate>

    <!-- Compact Material TabItem Style -->
    <Style x:Key="MaterialTabItemStyle_Compact"
           TargetType="TabItem">
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="Foreground" Value="{StaticResource TextOnPrimaryColor}"/>
        <Setter Property="MinWidth"   Value="0"/>
        <Setter Property="MaxWidth"   Value="{x:Static sys:Double.PositiveInfinity}"/>
        <Setter Property="MinHeight"  Value="26"/>
        <Setter Property="Padding"    Value="6,0"/>
        <Setter Property="Margin"     Value="0,0,-1,0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HeaderTemplate" Value="{StaticResource ClosableTabHeaderTemplate_Compact}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment"   Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter ContentSource="Header"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource PrimaryLightColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource PrimaryLightColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Compact TabPanel Style -->
    <Style TargetType="TabPanel" x:Key="CompactTabPanelStyle">
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="Margin" Value="0,0,0,-1"/>
    </Style>

    <!-- Small Delete Button Style for Chunks -->
    <Style x:Key="MaterialDeleteButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonTextColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="2"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" 
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding Content}"
                                        TextElement.Foreground="{TemplateBinding Foreground}"
                                        TextElement.FontSize="{TemplateBinding FontSize}"
                                        TextElement.FontWeight="{TemplateBinding FontWeight}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#F44336"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#D32F2F"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Chunk Delete Button Style (для удаления чанка) -->
    <Style x:Key="MaterialChunkDeleteButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDeleteButtonStyle}">
        <Setter Property="ToolTip" Value="Удалить блок текста"/>
    </Style>

    <!-- Image Delete Button Style (для удаления изображения) -->
    <Style x:Key="MaterialImageDeleteButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDeleteButtonStyle}">
        <Setter Property="ToolTip" Value="Удалить изображение"/>
    </Style>

</ResourceDictionary>
